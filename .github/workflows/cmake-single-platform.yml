# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake on a single platform

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-13 60
        sudo apt-get install -y ninja-build
        sudo apt-get install -y libgl-dev libgl1-mesa-dev
        sudo pip install conan==1.62.0
        conan profile new default --detect
        echo "[conf]\n" >> ~/.conan/profiles/default
        echo "tools.system.package_manager:sudo=True\n" >> ~/.conan/profiles/default
        echo "tools.system.package_manager:sudo_askpass=True\n" >> ~/.conan/profiles/default
        echo "tools.system.package_manager:mode=install" >> ~/.conan/profiles/default

    - name: Create build directory
      run: mkdir -p ${{github.workspace}} build

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake --preset linux-debug -B ${{github.workspace}}/build

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: bin/cenpy-common_tests --gtest_output=xml:test_results.xml

    - name: Test
      working-directory: ${{github.workspace}}/build
      uses: actions/upload-artifact@v2
      with:
        name: test-results
        path: test_results.xml

